// Names: Eva Abdul and Zainab Kazim
// Completion Date: 2022-06-22
// Program Name: Tic-Tac-Toe AI
// Program Description: Allows user to play a Tic-Tac-Toe with an unbeatable computer AI. The AI tries to block and/or win the game from the player. In order to win, the user or computer must get three pieces in a row on the board. The program runs until one of the players wins. 
import java.util.*;

/*This code is here to set up the stuff to store the previous moves made*/
class Move {
  int row;
  int col;

  public Move(int r, int c) {
    this.row = r;
    this.col = c;
  }

  public String toString() {
    return "ROW: " + this.row + "    COL: " + this.col;
  }

}

class Main {
  public static final Scanner scan = new Scanner(System.in);
  public static final ArrayList<Move> pmoves = new ArrayList<Move>();
  // count variable to count computers moves, used in method aiMove
  public static int ccount = 0;

  public static void main(String[] args) {
    gameLoop();
  }

  /*
   * This method will display the tic-tac-toe board. Remember that: 0 - cell is
   * empty 1 - player piece 2 - AI piece
   */

  public static void displayBoard(int[][] board) {
    for (int i = 0; i < board.length; i++) {
      for (int j = 0; j < board.length; j++) {
        if (board[i][j] == 0) {
          System.out.printf("%2s", " ");
        } else if (board[i][j] == 1) {
          System.out.printf("%2s", "X");
        } else {
          System.out.printf("%2s", "O");
        }
        if (j != 2) {
          System.out.printf(" |");
        }

      }
      if (i != 2) {
        System.out.printf("\n------------\n");
      }
      System.out.println("");
    }
    System.out.println();
  }

  /*
   * This code is here to check if there is a winner. It accepts a 2D int array
   * (board) and a number representing the player (1, 2) and returns true if there
   * is a winner, and false otherwise
   */
  public static boolean checkBoard(int[][] board, int p) {
    int diag = 0;
    int rdiag = 0;

    // rows & columns
    for (int i = 0; i <= 2; i++) {
      if (board[i][0] == board[i][1] && board[i][0] == board[i][2] && board[i][0] == p) {
        return true;
      } else if (board[0][i] == board[1][i] && board[0][i] == board[2][i] && board[0][i] == p) {
        return true;
      }
    }

    // diagonals
    for (int i = 0; i <= 2; i++) {
      if (board[i][i] == p) {
        diag++;
      }
      if (board[i][2 - i] == p) {
        rdiag++;
      }
    }

    if (diag == 3 || rdiag == 3) {
      return true;
    }

    return false;

  }

  /* This code checks for a tie, just in case there are no more moves to play */
  public static boolean tieCheck(int[][] board) {
    for (int[] i : board) {
      for (int j : i) {
        if (j == 0) {
          return true;
        }
      }
    }
    return false;
  }

  /* This is the game logic - do not change this method */
  public static void gameLoop() {
    int[][] board = { { 0, 0, 0 }, { 0, 0, 0 }, { 0, 0, 0 } };
    boolean playerWon = false;
    boolean aiWon = false;

    displayBoard(board);

    while (!playerWon && !aiWon) {

      board = playerMove(board);
      playerWon = checkBoard(board, 1);

      // displayBoard(board);

      if (playerWon) {
        System.out.println("\n                                   .''.       ");
        System.out.println("       .''.      .        *''*    :_\\/_:     . ");
        System.out.println("      :_\\/_:   _\\(/_  .:.*_\\/_*   : /\\ :  .'.:.'.");
        System.out.println("  .''.: /\\ :   ./)\\   ':'* /\\ * :  '..'.  -=:o:=-");
        System.out.println(" :_\\/_:'.:::.    ' *''*    * '.\\'/.' _\\(/_'.':'.'");
        System.out.println(" : /\\ : :::::     *_\\/_*     -= o =-  /)\\    '  *");
        System.out.println("  '..'  ':::'     * /\\ *     .'/.\\'.   '");
        System.out.println("      *            *..*         :");
        System.out.println("                   Congratulations! ");
        System.out.println("                     Player Won!! ");
        System.out.println("                                 .''.");
        System.out.println("       .''.             *''*    :_\\/_:     . ");
        System.out.println("      :_\\/_:   .    .:.*_\\/_*   : /\\ :  .'.:.'.");
        System.out.println("  .''.: /\\ : _\\(/_  ':'* /\\ *  : '..'.  -=:o:=-");
        System.out.println(" :_\\/_:'.:::. /)\\*''*  .|.* '.\\'/.'_\\(/_'.':'.'");
        System.out.println(" : /\\ : :::::  '*_\\/_* | |  -= o =- /)\\    '  *");
        System.out.println("  '..'  ':::'   * /\\ * |'|  .'/.\\'.  '._____");
        System.out.println("      *        __*..* |  |     :      |.   |' .---\"|");
        System.out.println("       _*   .-'   '-. |  |     .--'|  ||   | _|    |");
        System.out.println("    .-'|  _.|  |    ||   '-__  |   |  |    ||      |");
        System.out.println("    |' | |.    |    ||       | |   |  |    ||      |");
        System.out.println(" ___|  '-'     '    \"\"       '-'   '-.'    '`      |____");
        break;
      }

      boolean zeros = tieCheck(board);
      if (!zeros) {
      System.out.println("\n Tie - Game over :(");
        System.out.println("          ______________");
        System.out.println("         / ___________  \\ ");
        System.out.println("         | |          | |  ");
        System.out.println("         | |          | |");
        System.out.println("         | |          | |");
        System.out.println("         | |   __     | |");
        System.out.println("         | |  / /     | | ");
        System.out.println("         | | / /      | |");
        System.out.println("        _|_|_|_|      | | ");
        System.out.println("       / ______ \\     | | ");
        System.out.println("       \\ | |_| |/_____| |");
        System.out.println("        \\| |_| |________/");
        System.out.println("         | / \\ |   ");
        System.out.println("          \\| |/   ");
        System.out.println("           | |");
        System.out.println("           | |");
        System.out.println("           |_|    ");      
        System.out.println("Imagine not winning against a computer. Ha! can't relate ");
        break;
      }

      board = aiMove(board);
      aiWon = checkBoard(board, 2);

      displayBoard(board);

      if (aiWon) {
        System.out.println("\n                   Computer won!!!");
        System.out.println("                       ______");
        System.out.println("                    .-\"      \"-.");
        System.out.println("                   /            \\");
        System.out.println("       _          |              |          _");
        System.out.println("      ( \\         |,  .-.  .-.  ,|         / )");
        System.out.println("       > \"=._     | )(__/  \\__)( |     _.=\" <");
        System.out.println("      (_/\"=._\"=._ |/     /\\     \\|_.=\"_.=\"\\_)");
        System.out.println("             \"=._ (_     ^^     _)\"_.=\"");
        System.out.println("                 \"=\\__|IIIIII|__/=\"");
        System.out.println("                _.=\"| \\IIIIII/ |\"=._");
        System.out.println("      _     _.=\"_.=\"\\          /\"=._\"=._     _");
        System.out.println("     ( \\_.=\"_.=\"     `--------`     \"=._\"=._/ )");
        System.out.println("      > _.=\"                            \"=._ <");
        System.out.println("     (_/                                    \\_)");
        System.out.println("    Ha you can't beat me. I am superior. Be better.");
      }

      zeros = tieCheck(board);
      if (!zeros) {
        System.out.println("\n Tie - Game over :(");
        System.out.println("          ______________");
        System.out.println("         / ___________  \\ ");
        System.out.println("         | |          | |  ");
        System.out.println("         | |          | |");
        System.out.println("         | |          | |");
        System.out.println("         | |   __     | |");
        System.out.println("         | |  / /     | | ");
        System.out.println("         | | / /      | |");
        System.out.println("        _|_|_|_|      | | ");
        System.out.println("       / ______ \\     | | ");
        System.out.println("       \\ | |_| |/_____| |");
        System.out.println("        \\| |_| |________/");
        System.out.println("         | / \\ |   ");
        System.out.println("          \\| |/   ");
        System.out.println("           | |");
        System.out.println("           | |");
        System.out.println("           |_|    ");      
        System.out.println("Imagine not winning against a computer. Ha! can't relate ");
        break;
      }

    }
  }

  /* This is where a player makes their move - don't touch this */
  public static int[][] playerMove(int[][] board) {
    System.out.println("-------------Player Move (X)-------------\n");
    System.out.print("Enter a row: (0-2)");
    int row = Integer.parseInt(scan.nextLine());
    System.out.print("Enter a column: (0-2)");
    int col = Integer.parseInt(scan.nextLine());

    while (row < 0 || row > 2 || col < 0 || col > 2 || board[row][col] != 0) {
      System.out.print("Enter a row: (0-2)");
      row = Integer.parseInt(scan.nextLine());
      System.out.print("Enter a column: (0-2)");
      col = Integer.parseInt(scan.nextLine());
    }

    board[row][col] = 1;
    Move m = new Move(row, col);
    pmoves.add(m);

    return board;

  }


// This method is the Computer AI's gameplay
  public static int[][] aiMove(int[][] board) {
    System.out.println("\n-------------Computer Move (0)-------------\n");
    // These generate a random position for the computer AI to go if there are no other directions
    Random rand = new Random();
    int rowRand = rand.nextInt(2 - 0 + 1) + 0;
    int colRand = rand.nextInt(2 - 0 + 1) + 0;

    ///// This will make a winning move if there is one /////
    // 1st row winning combinationd
    if (board[0][1] == 2 && board[0][2] == 2 && board[0][0] == 0) {
      board[0][0] = 2;
    } else if (board[0][0] == 2 && board[0][2] == 2 && board[0][1] == 0) {
      board[0][1] = 2;
    } else if (board[0][0] == 2 && board[0][1] == 2 && board[0][2] == 0) {
      board[0][2] = 2;
      // second row winning combinations
    } else if (board[1][1] == 2 && board[1][2] == 2 && board[1][0] == 0) {
      board[1][0] = 2;
    } else if (board[1][0] == 2 && board[1][2] == 2 && board[1][1] == 0) {
      board[1][1] = 2;
    } else if (board[1][0] == 2 && board[1][1] == 2 && board[1][2] == 0) {
      board[1][2] = 2;
    }
    // third row winning combinations
    else if (board[2][1] == 2 && board[2][2] == 2 && board[2][0] == 0) {
      board[2][0] = 2;
    } else if (board[2][0] == 2 && board[2][2] == 2 && board[2][1] == 0) {
      board[2][1] = 2;
    } else if (board[2][0] == 2 && board[2][1] == 2 && board[2][2] == 0) {
      board[2][2] = 2;
    }
    // first column winning combinations
    else if (board[1][0] == 2 && board[2][0] == 2 && board[0][0] == 0) {
      board[0][0] = 2;
    } else if (board[2][0] == 2 && board[0][0] == 2 && board[1][0] == 0) {
      board[1][0] = 2;
    } else if (board[1][0] == 2 && board[0][0] == 2 && board[2][0] == 0) {
      board[2][0] = 2;
      // second column winning combinations 
    } else if (board[0][1] == 2 && board[2][1] == 2 && board[1][1] == 0) {
      board[1][1] = 2;
    } else if (board[1][1] == 2 && board[2][1] == 2 && board[0][1] == 0) {
      board[0][1] = 2;
    } else if (board[0][1] == 2 && board[1][1] == 2 && board[2][1] == 0) {
      board[2][1] = 2;
    }
    // third column winning moves
    else if (board[1][2] == 2 && board[2][2] == 2 && board[0][2] == 0) {
      board[0][2] = 2;
    } else if (board[0][2] == 2 && board[2][2] == 2 && board[1][2] == 0) {
      board[1][2] = 2;
    } else if (board[1][2] == 2 && board[0][2] == 2 && board[2][2] == 0) {
      board[2][2] = 2;
    }
    // diagonal from top right to bottom left winning moves
    else if (board[1][1] == 2 && board[2][0] == 2 && board[0][2] == 0) {
      board[0][2] = 2;
    } else if (board[2][0] == 2 && board[0][2] == 2 && board[1][1] == 0) {
      board[1][1] = 2;
    } else if (board[0][2] == 2 && board[1][1] == 2 && board[2][0] == 0) {
      board[2][0] = 2;
    }
    // diagonal From the top Left to bottom right winning moves
    else if (board[0][0] == 2 && board[2][2] == 2 && board[1][1] == 0) {
      board[1][1] = 2;
    } else if (board[0][0] == 2 && board[1][1] == 2 && board[2][2] == 0) {
      board[2][2] = 2;
    } else if (board[1][1] == 2 && board[2][2] == 2 && board[0][0] == 0) {
      board[0][0] = 2;
    }

    ///// This will make block a player winning move if there is one /////
    // first row blocking user moves
    else if (board[0][1] == 1 && board[0][2] == 1 && board[0][0] == 0) {
      board[0][0] = 2;
    } else if (board[0][0] == 1 && board[0][2] == 1 && board[0][1] == 0) {
      board[0][1] = 2;
    } else if (board[0][0] == 1 && board[0][1] == 1 && board[0][2] == 0) {
      board[0][2] = 2;
      // second row blocking moves
    } else if (board[1][1] == 1 && board[1][2] == 1 && board[1][0] == 0) {
      board[1][0] = 2;
    } else if (board[1][0] == 1 && board[1][2] == 1 && board[1][1] == 0) {
      board[1][1] = 2;
    } else if (board[1][0] == 1 && board[1][1] == 1 && board[1][2] == 0) {
      board[1][2] = 2;
    }
    // third row blocking user moves
    else if (board[2][1] == 1 && board[2][2] == 1 && board[2][0] == 0) {
      board[2][0] = 2;
    } else if (board[2][0] == 1 && board[2][2] == 1 && board[2][1] == 0) {
      board[2][1] = 2;
    } else if (board[2][0] == 1 && board[2][1] == 1 && board[2][2] == 0) {
      board[2][2] = 2;
    }
    // first column blocking user moves
    else if (board[1][0] == 1 && board[2][0] == 1 && board[0][0] == 0) {
      board[0][0] = 2;
    } else if (board[2][0] == 1 && board[0][0] == 1 && board[1][0] == 0) {
      board[1][0] = 2;
    } else if (board[1][0] == 1 && board[0][0] == 1 && board[2][0] == 0) {
      board[2][0] = 2;
      // second column blocking user moves
    } else if (board[0][1] == 1 && board[2][1] == 1 && board[1][1] == 0) {
      board[1][1] = 2;
    } else if (board[1][1] == 1 && board[2][1] == 1 && board[0][1] == 0) {
      board[0][1] = 2;
    } else if (board[0][1] == 1 && board[1][1] == 1 && board[2][1] == 0) {
      board[2][1] = 2;
    }
    // third column blocking user moves
    else if (board[1][2] == 1 && board[2][2] == 1 && board[0][2] == 0) {
      board[0][2] = 2;
    } else if (board[0][2] == 1 && board[2][2] == 1 && board[1][2] == 0) {
      board[1][2] = 2;
    } else if (board[1][2] == 1 && board[0][2] == 1 && board[2][2] == 0) {
      board[2][2] = 2;
    }
    // diagonal from top right to bottom left blocking user moves
    else if (board[1][1] == 1 && board[2][0] == 1 && board[0][2] == 0) {
      board[0][2] = 2;
    } else if (board[2][0] == 1 && board[0][2] == 1 && board[1][1] == 0) {
      board[1][1] = 2;
    } else if (board[0][2] == 1 && board[1][1] == 1 && board[2][0] == 0) {
      board[2][0] = 2;
    }
    // diagonal From the top Left to bottom right blocking user moves
    else if (board[0][0] == 1 && board[2][2] == 1 && board[1][1] == 0) {
      board[1][1] = 2;
    } else if (board[0][0] == 1 && board[1][1] == 1 && board[2][2] == 0) {
      board[2][2] = 2;
    } else if (board[1][1] == 1 && board[2][2] == 1 && board[0][0] == 0) {
      board[0][0] = 2;
    }
    ///// Game strategy /////
    // computer's First move scenarios
    else if (ccount == 0) {
      // places a piece in the middle if the user goes in the middle of a row or column and is not the middle of the board
      if (board[1][0] == 1 || board[0][1] == 1 || board[1][2] == 1 || board[2][1] == 1) {
        board[1][1] = 2;
      // places a piece in the middle if user goes in a corner
      } else if (board[0][0] == 1 || board[0][2] == 1 || board[2][0] == 1 || board[2][2] == 1) {
        board[1][1] = 2;
      // places a piece in the corner
      } else {
        board[0][2] = 2;
      }
      // computer's second move scenarios
    } else if (ccount == 1) {
      if ((board[0][0] == 1 && board[2][2] == 1) || (board[0][2] == 1 && board[2][0] == 1)) {
        if (board[0][1] == 0) {
          board[0][1] = 2;
        } else if (board[1][0] == 0) {
          board[1][0] = 2;
        } else if (board[1][2] == 0) {
          board[1][2] = 2;
        } else {
          board[2][1] = 2;
        }
      } else if (board[0][0] == 0) {
        board[0][0] = 2;
      } else if (board[2][2] == 0) {
        board[2][2] = 2;
      } else if (board[0][2] == 0) {
        board[0][2] = 2;
      } else {
        board[2][0] = 2;
      }
    }

    // If all else fails it will make a random move
    else {
      while (true) {
        if (board[rowRand][colRand] == 0) {
          board[rowRand][colRand] = 2;
          return board;
        } else {
          rowRand = rand.nextInt(2 - 0 + 1) + 0;
          colRand = rand.nextInt(2 - 0 + 1) + 0;
        }

      }
    }
    // Updating count variable to count computer moves
    ccount++;
    return board;


  }
}
